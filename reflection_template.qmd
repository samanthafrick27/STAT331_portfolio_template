---
title: "STAT 331 Portfolio"
author: "Samantha Frick"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
#| Lab 2 Question 1
surveys <- read_csv(here::here("Week 2", "Lab2", "surveys.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
#| Challenge 3
evals <- read_csv(here::here("Week 3", "Lab 3", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
SKIPPED
```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
# Lab 3 Question 5 Revised
# Success comment: "Nice use of across!"

teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(across(.cols = c(course_id, teacher_id), .fns = ~ as.character(.x)),
         across(.cols = c(question_no, academic_degree, sex), .fns = ~ as.factor(.x)),
         no_participants = as.integer(no_participants)
         ) |>
  select(course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2
SKIPPED
```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
# Lab 4 Question 5 Revised
# Growing Comment: Notice that your table still has a grouping variable! Because you grouped by **two** variables, your first group was not dropped! Can you give your column names better titles, so the reader knows what "2008" and "2018" represent? What are the values stored in these columns?
# I added .groups = "drop" to make sure that all grouping is removed. I also added prefixes to the column names to make it clear to the reader what values are in these columns. 

income_by_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(county_region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_income,
              names_prefix = "median_income_") |>
  arrange(desc(median_income_2018))

income_by_region
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1

```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# Lab 4 Question 5 Revised
# Growing Comment: Notice that your table still has a grouping variable! Because you grouped by **two** variables, your first group was not dropped! Can you give your column names better titles, so the reader knows what "2008" and "2018" represent? What are the values stored in these columns?
# I added .groups = "drop" to make sure that all grouping is removed. I also added prefixes to the column names to make it clear to the reader what values are in these columns. 

income_by_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(county_region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_income,
              names_prefix = "median_income_") |>
  arrange(desc(median_income_2018))

income_by_region
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# Lab 4 Question 5 Revised
# Growing Comment: Notice that your table still has a grouping variable! Because you grouped by **two** variables, your first group was not dropped! Can you give your column names better titles, so the reader knows what "2008" and "2018" represent? What are the values stored in these columns?
# I added .groups = "drop" to make sure that all grouping is removed. I also added prefixes to the column names to make it clear to the reader what values are in these columns. 

income_by_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(county_region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_income,
              names_prefix = "median_income_") |>
  arrange(desc(median_income_2018))

income_by_region
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1
# Lab 4 Question 7 Revised
# Success comment: Nice work pivoting and modifying the age variable!Nice work reordering your legend and your facets!!!Can you match my colors??? These are coming from a package and you will need to expand the color palette to get all 10 colors.

region_labels <- c(
  san_fran_counties            = "San Francisco Bay Area",
  inland_counties              = "Inland Empire",
  superior_counties            = "Superior California",
  north_coast_counties         = "North Coast",
  central_coast_counties       = "Central Coast",
  n_san_joaquin_counties       = "Northern San Joaquin Valley",
  s_san_joaquin_counties       = "Southern San Joaquin Valley",
  la_county                    = "Los Angeles County",
  orange_county                = "Orange County",
  san_diego_imperial_counties  = "San Diegoâ€“Imperial"
)
ca_childcare |>
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
             names_to = "age_group", names_prefix = "mc_",
             values_to = "weekly_price") |>
  mutate(age_group = str_to_title(age_group),
  county_region = fct_reorder2(.f = county_region,
                               .x = study_year,
                               .y = weekly_price)) |> 
  ggplot(mapping = aes(x = study_year, y = weekly_price, color = county_region)) +
  geom_point(alpha = 0.8, size = 0.6) +
  geom_smooth(method = "loess", linewidth = 0.5) + 
  facet_wrap(~ age_group) + 
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = NULL,
    color = "California Region"
  ) + 
    scale_color_manual(
    breaks = names(region_labels),
    labels = region_labels,
    values = colorRampPalette(brewer.pal(8, "Accent"))(10)
  ) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) + 
  scale_y_continuous(limits = c(100, 500)) +
  theme_bw() +
  theme(
    aspect.ratio = 1,
    axis.text = element_text(size = 6),
    plot.title = element_text(size = 10),
    panel.border = element_rect(color = "black", fill = NA)
  )  
```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2
# Challenge 4 Question 2 Revised
#Incredible work! Nice job matching the colors, the percentage labels, and the legend position! Your colors are SO close! I chose colors from the Valkyries. You can use a color picker app (or Chrome extension) to feed in a plot / website and get the hex codes for the colors out! Then you donâ€™t have to memorize what my favorite colors are. :)

ggplot(data = teacher_evals_compare) +
  geom_bar(
    mapping = aes(x = sen_level, fill = set_level),
    position = "fill"
  ) +
  scale_fill_manual(
    values = c(
      "excellent" = "#B897D4",  
      "standard"  = "#BA965C"   
    )
  ) +
  labs(
    title = "Evaluation of Teachers' Use of Activities",
    x = "Years of Experience",
    y = NULL,
    fill = "Evaluation Rating"
  ) +
  theme_minimal() + 
  theme(
    legend.position = "top",
    panel.border = element_rect(color = "black")
  ) +
  scale_y_continuous(labels = scales::label_percent())
```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# Success comment: Nice work! This is an efficient way to get both summaries in one function call!

teacher_evals_clean |>
  summarize(
    n_distinct(teacher_id),
    n_distinct(course_id)
  )
    
```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1
# Lab 4 Question 5 Revised
# Growing Comment: Notice that your table still has a grouping variable! Because you grouped by **two** variables, your first group was not dropped! Can you give your column names better titles, so the reader knows what "2008" and "2018" represent? What are the values stored in these columns?
# I added .groups = "drop" to make sure that all grouping is removed. I also added prefixes to the column names to make it clear to the reader what values are in these columns. 

income_by_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(county_region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_income,
              names_prefix = "median_income_") |>
  arrange(desc(median_income_2018))

income_by_region
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   using `across()`

```{r}
#| label: pe-1-across
#| Lab 3 Question 5 Revised
# Success comment: "Nice use of across!"

teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(across(.cols = c(course_id, teacher_id), .fns = ~ as.character(.x)),
         across(.cols = c(question_no, academic_degree, sex), .fns = ~ as.factor(.x)),
         no_participants = as.integer(no_participants)
         ) |>
  select(course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across
#| Lab 3 Question 5 Revised
# Success comment: "Nice use of across!"

teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(across(.cols = c(course_id, teacher_id), .fns = ~ as.character(.x)),
         across(.cols = c(question_no, academic_degree, sex), .fns = ~ as.factor(.x)),
         no_participants = as.integer(no_participants)
         ) |>
  select(course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
